const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

const config = {
  token: process.env.TOKENBOT,
  ownerIds: [process.env.REDPLASHE, process.env.MANUKQ],
  channelId: process.env.CHANNEL_ID,
  proposalsFile: 'proposals.json',
  maxImageSize: 5242880,
  messageDelay: 1000
};

let proposals = {};
const pendingRejections = {};

if (fs.existsSync(config.proposalsFile)) {
  try {
    proposals = JSON.parse(fs.readFileSync(config.proposalsFile, 'utf8'));
  } catch (e) {
    proposals = {};
  }
}

function saveProposals() {
  fs.writeFileSync(config.proposalsFile, JSON.stringify(proposals, null, 2));
}

const bot = new TelegramBot(config.token, { polling: true });

bot.onText(/\/start/, (msg) => {
  const welcome = `
üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!

–Ø –ø–∏–ø–æ–±–æ—Ç –¥–ª—è –ø–∏–ø–æ—Å–±–æ—Ä–∞ –∏ –ø–∏–ø–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–∏.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—é–¥–∞, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ ))`;

  bot.sendMessage(msg.chat.id, welcome, { parse_mode: 'Markdown' });
});

bot.onText(/\/list/, async (msg) => {
  if (!config.ownerIds.includes(msg.chat.id.toString())) return;

  const proposalsList = Object.values(proposals)
    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

  if (proposalsList.length === 0) {
    bot.sendMessage(msg.chat.id, 'üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.');
    return;
  }

  const chunks = [];
  let currentChunk = 'üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n';

  for (const proposal of proposalsList) {
    const date = new Date(proposal.timestamp).toLocaleString('ru-RU');
    const status = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
      'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ',
      'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    }[proposal.status];

    const proposalText = `ID: ${proposal.id}\n–°—Ç–∞—Ç—É—Å: ${status}\n–î–∞—Ç–∞: ${date}\n–¢–µ–∫—Å—Ç: ${proposal.text}${proposal.rejectionReason ? `\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: ${proposal.rejectionReason}` : ''}\n\n`;

    if (currentChunk.length + proposalText.length > 4000) {
      chunks.push(currentChunk);
      currentChunk = proposalText;
    } else {
      currentChunk += proposalText;
    }
  }
  chunks.push(currentChunk);

  for (const chunk of chunks) {
    await bot.sendMessage(msg.chat.id, chunk, { parse_mode: 'Markdown' });
    await new Promise(resolve => setTimeout(resolve, 500));
  }
});

bot.on('message', async (msg) => {
  if (msg.text?.startsWith('/')) return;

  const chatId = msg.chat.id;

  if (pendingRejections[msg.from.id]) {
    const proposalKey = pendingRejections[msg.from.id];
    if (proposals[proposalKey]?.status === 'pending') {
      proposals[proposalKey].status = 'rejected';
      proposals[proposalKey].rejectionReason = msg.text;
      proposals[proposalKey].rejectedAt = new Date().toISOString();
      saveProposals();
      
      bot.sendMessage(proposals[proposalKey].senderId, 
        `‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n*–ü—Ä–∏—á–∏–Ω–∞:* ${msg.text}`,
        { parse_mode: 'Markdown' });
      bot.sendMessage(msg.from.id, '‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.');
    }
    delete pendingRejections[msg.from.id];
    return;
  }

  const proposalKey = `${chatId}_${msg.message_id}`;
  let fileId = null;

  if (msg.photo) {
    const photo = msg.photo[msg.photo.length - 1];
    if (photo.file_size > config.maxImageSize) {
      bot.sendMessage(chatId, '‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
      return;
    }
    fileId = photo.file_id;
  }

  proposals[proposalKey] = {
    id: proposalKey,
    senderId: chatId,
    text: msg.text || msg.caption,
    fileId: fileId,
    status: 'pending',
    timestamp: new Date().toISOString()
  };
  
  saveProposals();

  const opts = {
    reply_markup: {
      inline_keyboard: [[
        { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${chatId}_${msg.message_id}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${chatId}_${msg.message_id}` }
      ]],
    },
    parse_mode: 'Markdown'
  };

  for (const ownerId of config.ownerIds) {
    const message = `üì´ *–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ*\n\n–¢–µ–∫—Å—Ç: ${msg.text || msg.caption || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`;
    
    if (fileId) {
      await bot.sendPhoto(ownerId, fileId, { caption: message, ...opts });
    } else {
      await bot.sendMessage(ownerId, message, opts);
    }
  }

  bot.sendMessage(chatId, 'üì§ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
});

bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const [action, userChatId, messageId] = callbackQuery.data.split('_');
  const proposalKey = `${userChatId}_${messageId}`;
  
  await bot.answerCallbackQuery(callbackQuery.id);
  
  if (!proposals[proposalKey] || proposals[proposalKey].status !== 'pending') {
    await bot.sendMessage(callbackQuery.from.id, '‚ö†Ô∏è –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
    return;
  }
  
  if (action === 'accept') {
    try {
      const proposal = proposals[proposalKey];

      if (proposal.fileId) {
        await bot.sendPhoto(config.channelId, proposal.fileId, {
          caption: proposal.text,
          parse_mode: 'Markdown'
        });
      } else {
        await bot.sendMessage(config.channelId, proposal.text, {
          parse_mode: 'Markdown'
        });
      }

      proposal.status = 'accepted';
      proposal.acceptedAt = new Date().toISOString();
      saveProposals();

      await bot.sendMessage(userChatId, 'üéâ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');

      const editOpts = {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        reply_markup: { inline_keyboard: [] }
      };

      if (proposal.fileId) {
        await bot.editMessageCaption('‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.', editOpts);
      } else {
        await bot.editMessageText('‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.', editOpts);
      }
    } catch (err) {
      await bot.sendMessage(callbackQuery.from.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.');
    }
  } else if (action === 'reject') {
    pendingRejections[callbackQuery.from.id] = proposalKey;
    await bot.sendMessage(callbackQuery.from.id, 'üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:',
      { reply_markup: { force_reply: true } }
    );

    const editOpts = {
      chat_id: msg.chat.id,
      message_id: msg.message_id,
      reply_markup: { inline_keyboard: [] }
    };

    if (proposals[proposalKey].fileId) {
      await bot.editMessageCaption('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...', editOpts);
    } else {
      await bot.editMessageText('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...', editOpts);
    }
  }
});

process.on('uncaughtException', err => console.error('–û—à–∏–±–∫–∞:', err));
process.on('unhandledRejection', err => console.error('–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', err));

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');